
[flake8]
# flake8 configuration:
# https://flake8.pycqa.org/en/latest/user/configuration.html
show-source = true
doctests = true
enable-extensions = G


# Flake plugins:
max-line-length = 120
max-doc-length = 120
indent-size = 4
statistics = True
max-complexity = 6
max-imports = 20
docstring-convention=google
inline-quotes = double

# Excluding some directories:
exclude = .git,__pycache__,.venv, venv,.env, manage.py, **/migrations, **/__init__.*
ignore =
per-file-ignores =
rst-roles =class,func,ref
rst-directives =envvar,exception
rst-substitutions = version
extend-ignore = RST307,RST201,RST203,RST301,

[tool:black]
line-length = 120

[isort]
# isort configuration:
# https://github.com/PyCQA/isort/wiki/isort-Settings
include_trailing_comma = true
use_parentheses = true
# See https://github.com/PyCQA/isort#multi-line-output-modes
multi_line_output = 3
line_length = 120
atomic = true
profile = django
skip_gitignore = true


[mypy]
# Mypy configuration:
# https://mypy.readthedocs.io/en/latest/config_file.html
enable_error_code = truthy-bool, redundant-expr, unused-awaitable
python_version = 3.12

# General strictness and safety settings
check_untyped_defs = True
disallow_untyped_calls = True
disallow_untyped_decorators = True
disallow_any_generics = True
strict_optional = True
strict_equality = True
no_implicit_optional = True
local_partial_types = True

# Reporting and warning settings
warn_unused_ignores = True
warn_redundant_casts = True
warn_no_return = True
warn_unreachable = True
warn_unused_configs = True

# Ignore issues in third-party libraries by default
ignore_missing_imports = True

# Prevent the redefinition of variables
allow_redefinition = False

# Ensure symbols are re-exported explicitly
implicit_reexport = False

# Plugins to enhance Django compatibility
plugins = mypy_django_plugin.main

[mypy.plugins.django-stubs]
# Set your Django settings module
django_settings_module = "core.settings"

[mypy-*.migrations.*]
# Ignore errors in migrations as they are generated code
ignore_errors = True

[mypy-manage.*]
# Ignore errors in migrations as they are generated code
ignore_errors = True

[tool:pytest]
# pytest configuration for Django projects:
DJANGO_SETTINGS_MODULE = core.test_settings

python_files = tests.py test_*.py *_tests.py

# Timeout for tests (optional, adjust as needed):
# timeout = 60  # Example to set timeout for each test

# pytest features
xfail_strict = true  # Strict behavior for xfail tests (they will fail if they pass)

# Directories that pytest should ignore
norecursedirs = .git __pycache__ .venv

# Command-line options
addopts =
    --strict-markers        # Enforce strict checking for markers
    --strict-config         # Strict config validation
    --doctest-modules       # Enable testing of docstrings
    --fail-on-template-vars # Fail if template variables are undefined
    --dup-fixtures          # Fail if there are duplicate fixtures
    --tb=short              # Short traceback output (for readability)
    -n auto                 # Enable parallel test execution (uncomment if beneficial)
    --cov=.
    --cov=tests
    --cov-branch            # Track coverage for branches
    --cov-report=html       # Generate HTML coverage report
    --cov-report=xml        # Generate XML coverage report (useful for CI/CD)
    --cov-fail-under=90     # Fail tests if coverage is below 90%
    --ignore=tests,.venv    # Ignore test files and virtual environment directories


[coverage:run]
# Coverage configuration:
# https://coverage.readthedocs.io/en/latest/config.html
plugins =
    django_coverage_plugin  # Use Django-specific coverage plugin

# Omit files and directories from coverage
omit =
    .venv/**
    tests/**
    *.txt
    manage.py
    **/migrations/**
    **/urls.py       # Optionally, you can omit URL config files
    **/wsgi.py       # Optionally, you can omit WSGI config files

# Additional Coverage Settings:
branch = True          # Include branch coverage (good for condition coverage)
